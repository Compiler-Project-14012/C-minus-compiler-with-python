Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list
Declaration-list -> EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> #save_type Type-specifier #save_id ID #Checked
Declaration-prime -> Fun-declaration-prime
Declaration-prime -> Var-declaration-prime
Var-declaration-prime -> ; #add_variable    #Checked
Var-declaration-prime -> [ #save_array NUM ] ;      #Checked



Fun-declaration-prime -> #collect_params ( Params )#save_index #create_AR #collect_return_indexes Compound-stmt #fill_return_indexes #Check

Type-specifier -> int
Type-specifier -> void

Params -> #save_type int #save_id ID #add_variable_params Param-prime Param-list   #Checked
Params -> void
Param-list -> , Param #add_variable_params Param-list  #Checked
Param-list -> EPSILON
Param -> Declaration-initial Param-prime
Param-prime ->  [ ]
Param-prime -> EPSILON


Compound-stmt -> #get_new_scope { Declaration-list Statement-list } #get_out_of_scope   #Checked

Statement-list -> Statement Statement-list
Statement-list -> EPSILON


Statement -> Expression-stmt
Statement -> Compound-stmt
Statement -> Selection-stmt
Statement -> Iteration-stmt
Statement -> Return-stmt



Expression-stmt -> Expression ; #pop_extras     #Checked
Expression-stmt -> break ; #save_break_address  #Checked
Expression-stmt -> ;


Selection-stmt -> if ( Expression ) #save_index Statement #jpf else Statement #jump     #Checked

Iteration-stmt -> repeat #add_to_breaks #save_index Statement until  ( Expression ) #until_jump #Checked

Return-stmt -> return Return-stmt-prime #save_returns #Checked

Return-stmt-prime -> #fake_value ;
Return-stmt-prime -> Expression ;

Expression -> Simple-expression-zegond
Expression -> #find_address ID B


B -> = Expression #result_to
B -> [ Expression ] #find_index H
B -> Simple-expression-prime


H -> = Expression #result_to
H -> G D C

Simple-expression-zegond -> Additive-expression-zegond C

Simple-expression-prime -> Additive-expression-prime C


C -> #save_op Relop Additive-expression #make_op
C -> EPSILON

Relop -> <
Relop -> ==

Additive-expression -> Term D


Additive-expression-prime -> Term-prime D

Additive-expression-zegond -> Term-zegond D

D -> #save_op Addop Term #make_op D
D -> EPSILON

Addop -> +
Addop -> -

Term -> Factor G

Term-prime -> Factor-prime G

Term-zegond -> Factor-zegond G

G -> * Factor #mult G
G -> EPSILON



Factor -> ( Expression )
Factor -> #find_address ID Var-call-prime
Factor -> #save_num NUM


Var-call-prime -> ( Args #output ) #get_into_function
Var-call-prime -> Var-prime



\\\
Var-prime -> [ Expression ] #find_index
Var-prime -> EPSILON

Factor-prime -> ( Args #output ) #get_into_function
Factor-prime -> EPSILON

Factor-zegond -> ( Expression )
Factor-zegond -> #save_num NUM

Args -> Arg-list
Args -> EPSILON

Arg-list -> Expression Arg-list-prime

Arg-list-prime -> , Expression Arg-list-prime
Arg-list-prime -> EPSILON